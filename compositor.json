{
  "name": "queckezz/create-dom-tree",
  "version": "0.1.4",
  "libraries": {
    "xv": "^1.1.19"
  },
  "title": "",
  "branch": "",
  "style": {
    "name": "Brutalist",
    "componentSet": {
      "nav": "nav/BasicNav",
      "header": "header/BasicHeader",
      "article": "article/MarkdownArticle",
      "footer": "footer/BasicFooter"
    },
    "fontFamily": "Consolas, \"Liberation Mono\", Menlo, Courier, monospace",
    "heading": {},
    "typeScale": [
      48,
      32,
      20,
      18,
      16,
      14,
      12
    ],
    "layout": {
      "maxWidth": 1024,
      "fluid": true
    },
    "colors": {
      "text": "#333",
      "background": "#fff",
      "primary": "#666",
      "secondary": "#888",
      "highlight": "#1f80ff",
      "muted": "#f6f6f6",
      "border": "#eee"
    }
  },
  "content": [
    {
      "component": "nav",
      "links": [
        {
          "href": "https://github.com/queckezz/create-dom-tree",
          "text": "GitHub"
        },
        {
          "href": "https://npmjs.com/package/create-dom-tree",
          "text": "npm"
        }
      ]
    },
    {
      "component": "header",
      "heading": "create-dom-tree",
      "subhead": "Create a DOM tree with ease.",
      "children": [
        {
          "component": "ui/TweetButton",
          "text": "create-dom-tree: Create a DOM tree with ease.",
          "url": ""
        },
        {
          "component": "ui/GithubButton",
          "user": "queckezz",
          "repo": "create-dom-tree"
        }
      ],
      "text": "v1.0.1"
    },
    {
      "component": "article",
      "metadata": {
        "source": "github.readme"
      },
      "html": "\n<blockquote>\n<p> Create DOM elements fast with a convenient syntax\n<br></p>\n</blockquote>\n<p><a href=\"https://travis-ci.org/queckezz/create-dom-tree\"></a>\n<a href=\"https://npmjs.org/package/create-dom-tree\"></a>\n<a href=\"https://david-dm.org/queckezz/create-dom-tree\"></a>\n<a href=\"./license\"></a>\n<a href=\"https://github.com/feross/standard\"></a></p>\n<p>This module is an alternative to <a href=\"https://facebook.github.io/react/docs/jsx-in-depth.html\">jsx</a> or <a href=\"https://github.com/shama/bel\">template strings</a> for those who want to build up their DOM trees using plain function composition.</p>\n<pre>div([\n  h1(<span class=\"hljs-string\">&apos;.bold&apos;</span>, <span class=\"hljs-string\">&apos;create-dom-tree&apos;</span>),\n  h2(<span class=\"hljs-string\">&apos;#subtitle&apos;</span>, <span class=\"hljs-string\">&apos;Create a DOM tree with ease&apos;</span>),\n  button({ href: <span class=\"hljs-string\">&apos;http://ghub.io/create-dom-tree&apos;</span> }, <span class=\"hljs-string\">&apos;Open&apos;</span>),\n  ul([<span class=\"hljs-string\">&apos;simple&apos;</span>, <span class=\"hljs-string\">&apos;functional&apos;</span>, <span class=\"hljs-string\">&apos;fast&apos;</span>].map(key =&gt; li(key)))\n])</pre><h2>Features</h2>\n<ul>\n<li>Create complex DOM trees with ease</li>\n<li>Weights only ~1.2kb in size</li>\n<li>Functional utilities can be used since it&apos;s just functions</li>\n<li>Works perfectly with <a href=\"https://github.com/patrick-steele-idem/morphdom\">morphdom</a> or <a href=\"https://github.com/yoshuawuyts/nanomorph\">nanomorph</a></li>\n</ul>\n<h2>Installation</h2>\n<pre>&gt; npm install create-dom-tree</pre><h2>Usage</h2>\n<pre><span class=\"hljs-keyword\">const</span> { div, h1, a } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&apos;create-dom-tree&apos;</span>)\n\n<span class=\"hljs-keyword\">const</span> tree = div(<span class=\"hljs-string\">&apos;.container.p2#js-root&apos;</span>, [\n  h1(<span class=\"hljs-string\">&apos;.title&apos;</span>, <span class=\"hljs-string\">&apos;This is a title&apos;</span>),\n  div({ style: <span class=\"hljs-string\">&apos;background-color: red;&apos;</span> }, [\n    a({ href: <span class=\"hljs-string\">&apos;http://github.com&apos;</span> }, <span class=\"hljs-string\">&apos;Github&apos;</span>)\n  ])\n])\n\n<span class=\"hljs-built_in\">console</span>.log(tree.outerHTML)\n<span class=\"hljs-comment\">/*\n * -&gt;\n * &lt;div class=&quot;full-width p2&quot;&gt;\n *   &lt;h1&gt;Some text&lt;/h1&gt;\n *   &lt;div style=&quot;background-color: red;&quot;&gt;\n *     &lt;a href=&quot;http://github.com&quot;&gt;Github&lt;/a&gt;\n *   &lt;/div&gt;\n * &lt;/div&gt;\n */</span></pre><h2>Guide</h2>\n<p>Each <a href=\"https://github.com/ohanhi/hyperscript-helpers/blob/master/src/index.js#L26-L38\">element</a> in the DOM is exposed as a function when requiring <code>create-dom-tree</code>.</p>\n<pre><span class=\"hljs-keyword\">const</span> { div, h1, p, button } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&apos;create-dom-tree&apos;</span>)</pre><p>These functions have the following syntax:</p>\n<pre>tag(selector, attributes, children)</pre><p>All arguments are <strong>optional</strong> with at least <strong>one argument needing to be present</strong>. This kind of function overloading allows you to iterate on your DOM structure really fast and reduce visual noise.</p>\n<ul>\n<li><strong>selector</strong> can be <code>.title</code> to append a class or <code>#id</code> to give the element an id. These can be mixed as you might expect: <code>#id.title.pad.red</code></li>\n<li><strong>attributes</strong> is an object of dom attributes: <code>{ href: &apos;#header&apos; }</code></li>\n<li><strong>children</strong> can be a string for a text node or an array of nodes</li>\n</ul>\n<h3>Lifecycle hooks</h3>\n<p>This module aims to be just the element creation layer. It can be used with any view framework using DOM as their base element like <a href=\"https://github.com/ahdinosaur/inu\">choo</a> or <a href=\"https://github.com/ahdinosaur/inu\">inu</a>.</p>\n<h3>Use without helper functions</h3>\n<p>If you want, you can fall back to the traditional <code>createElement(tag, attributes, children)</code> instead of the exposed helper functions.</p>\n<pre><span class=\"hljs-keyword\">const</span> { h } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&apos;create-dom-tree&apos;</span>)\n<span class=\"hljs-comment\">// -&gt; or { createElement }</span>\n\n<span class=\"hljs-keyword\">const</span> node = h(<span class=\"hljs-string\">&apos;h1&apos;</span>, <span class=\"hljs-string\">&apos;text&apos;</span>)\n\n<span class=\"hljs-built_in\">console</span>.log(node.outerHTML)\n<span class=\"hljs-comment\">/* \n * -&gt;\n * &lt;h1&gt;text&lt;/h1&gt;\n */</span></pre><h2>Differences from <code>hyperscript</code></h2>\n<p>This module is a lot smaller because its focused on only creating DOM elements. Feel free to built upon this if you feel like needing any of the following features:</p>\n<ul>\n<li>No <a href=\"https://github.com/dominictarr/observable\">observable</a> support</li>\n<li>No default <code>div</code> tag since it&apos;s not needed with <a href=\"https://github.com/ohanhi/hyperscript-helpers\">hyperscript-helpers</a></li>\n</ul>\n<pre>createElement(<span class=\"hljs-string\">&apos;text&apos;</span>) <span class=\"hljs-comment\">// -&gt; doesn&apos;t generate &lt;div&gt;Text&lt;/div&gt;</span></pre><ul>\n<li>No <a href=\"https://github.com/dominictarr/hyperscript/blob/master/test/index.js#L120-L126\">context</a></li>\n</ul>\n<h3>SVG Support</h3>\n<p>As of writing this, there is no SVG support yet. This is on the <a href=\"https://github.com/queckezz/create-dom-tree/issues/1\">roadmap</a></p>\n<h2>Syntax comparison</h2>\n<p>While the syntax differences are subtle, as the the tree grows, these small differences can influence visual noise by a lot.</p>\n<h3>Helper functions or <code>create-dom-tree</code></h3>\n<pre>ul(<span class=\"hljs-string\">&apos;.items&apos;</span>, items.map((item) =&gt; li(item.text)))</pre><h3>Hyperscript</h3>\n<p>This traditional syntax is also available through <code>createElement</code> from this module.</p>\n<pre>h(<span class=\"hljs-string\">&apos;ul.items&apos;</span>, items.map((item) =&gt; li(item.text)))</pre><h3>JSX</h3>\n<p>This syntax is a non-standard language addition popularized by facebook. Each <code>tag</code> gets converted into a function call.</p>\n<pre>&lt;ul <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&apos;items&apos;</span>&gt;\n  {items.map((item) =&gt; <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>{item.title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span>)}\n&lt;<span class=\"hljs-regexp\">/ul&gt;</span></pre><h3>Template strings</h3>\n<p>This syntax was popularized by <a href=\"https://github.com/substack\">substack</a> and is used by <a href=\"https://github.com/maxogden/yo-yo\">yo-yo</a>, <a href=\"https://github.com/ahdinosaur/inu\">inu</a> and <a href=\"https://github.com/yoshuawuyts/choo\">choo</a>. They all utilize <a href=\"https://github.com/substack/hyperx\">hyperx</a> under the hood.</p>\n<pre>yo<span class=\"hljs-string\">`&lt;ul&gt;\n  <span class=\"hljs-subst\">${items.map((item) =&gt; yo`&lt;li&gt;${item}</span>&lt;/li&gt;`</span>)}\n&lt;<span class=\"hljs-regexp\">/ul&gt;`</span></pre><h2>External tools</h2>\n<ul>\n<li><a href=\"html-to-hyperscript.paqmind.com\">html-to-hyperscript</a> - Webservice to convert HTML to hyperscript</li>\n</ul>\n<h2>Tests</h2>\n<p>Tests are written using JSDOM.</p>\n<pre>&gt; npm <span class=\"hljs-built_in\">test</span></pre><h2>License</h2>\n<p><a href=\"./license\">MIT</a></p>\n<p><sub>The icon in the title was created by <a href=\"http://danielbruce.se\">Daniel Bruce</a> under the <a href=\"http://creativecommons.org/licenses/by-sa/3.0/\">Creative Commons Attribution-Share Alike 3.0 Unported License</a></sub></p>\n"
    },
    {
      "component": "footer",
      "links": [
        {
          "href": "https://github.com/queckezz/create-dom-tree",
          "text": "GitHub"
        },
        {
          "href": "https://github.com/queckezz",
          "text": "queckezz"
        }
      ]
    }
  ]
}